#!/bin/bash
# package:		Part of VPL-Jail-System
# copyright:    Copyright (C) 2014 Juan Carlos Rodriguez-del-Pino
# license:      GNU/GPL, see LICENSE.txt or http://www.gnu.org/licenses/gpl.txt
# Description:  Script to install VPL-Jail-System

echo "Runing with parms: $@"
LOGFILE=/var/log/vpl_installation.log
VPL_PROGRAMS_DIR=/usr/sbin/vpl
VPL_CONFIG_DIR=/etc/vpl

{
	date > "$LOGFILE"
	exec &> >(tee "$LOGFILE")
} &> /dev/null

function vpl_detect_package_manager() {
	if [ "$UID" != "0" ] && [ "$EUID" != "0" ] ; then
		echo "This script need to be run as user root and is run as user $USER uid $UID euid $EUID"
		exit 1;
	fi
	# Detect package manager (YUM/APT)
	if [ "$(command -v yum)" != "" ] ; then
		echo "Using YUM package manager" 
		function vpl_install_base {
			yum -y install $1 >> "$LOGFILE"
			return $?
		}
		function vpl_install_check {
			yum list $1 &> /dev/null
			return $?
		}
		PMTYPE="1"
	elif [ "$(command -v apt-get)" != "" ] ; then
		echo "Using APT package manager"
		echo "Updating distribution software DB"
		apt-get update >> "$LOGFILE"
		function vpl_install_base {
			apt-get -q -y --allow-unauthenticated install $1 >> "$LOGFILE"
			return $?
		}
		function vpl_install_check {
			apt-cache pkgnames $1 | grep -q -x -F $1
			return $?
		}
		PMTYPE="2"
	elif [ "$(command -v apk)" != "" ] ; then
		echo "Using APK package manager"
		echo "Updating distribution software DB"
		apk update >> "$LOGFILE"
		apk upgrade >> "$LOGFILE"
		function vpl_install_base {
			apk add $1 >> "$LOGFILE"
			return $?
		}
		function vpl_install_check {
			apk add $1 &> /dev/null
			return $?
		}
		PMTYPE="3"
	else
		echo "Sorry, I can't detect the package manager of the system"
		echo "Acepted package managers APT an YUM."
		exit 1
	fi
}

function vpl_detect_service_manager(){
	# Detect service manager
	if [ "$(command -v systemctl)" != "" ] ; then
		echo "Using systemd service manager"	 
		function vpl_install_service {
			cp vpl-jail-system.initd $VPL_PROGRAMS_DIR/vpl-jail-system
			chmod +x $VPL_PROGRAMS_DIR/vpl-jail-system
			cp vpl-jail-system.service /etc/systemd/system/vpl-jail-system.service
			systemctl daemon-reload
			systemctl enable vpl-jail-system
		}
		function vpl_stop_service {
			systemctl stop vpl-jail-system
		}
		function vpl_start_service {
			systemctl start vpl-jail-system
		}
		function vpl_info_using_service {
			echo
			echo "-------------------------------------------------------"
			echo "Notice: you may use next command to control the service"
			echo "systemctl [start|stop|status] vpl-jail-system"
		}
		SMANAGER="1"
	elif [ -x /sbin/init ] ; then
		echo "Using system V service manager"	 
		function vpl_install_service {
			cp vpl-jail-system.initd $VPL_PROGRAMS_DIR/vpl-jail-system
			chmod +x $VPL_PROGRAMS_DIR/vpl-jail-system
			cp vpl-jail-system.initd /etc/init.d/vpl-jail-system
			chmod +x /etc/init.d/vpl-jail-system
			if [ "$(command -v update-rc.d)" != "" ] ; then
				update-rc.d -f vpl-jail-system remove >> "$LOGFILE"
				update-rc.d vpl-jail-system defaults >> "$LOGFILE"
			else
				if [ "$(command -v chkconfig)" != "" ] ; then
					chkconfig --add vpl-jail-system  >> "$LOGFILE"
				else
					echo "ERROR installing the service. Not found update-rc.d or chkconfig"
				fi
			fi
		}
		function vpl_stop_service {
			service vpl-jail-system stop
		}
		function vpl_start_service {
			service vpl-jail-system start
		}
		function vpl_info_using_service {
			echo
			echo "-------------------------------------------------------"
			echo "Notice: you may use next command to control the service"
			echo "service vpl-jail-system [start|stop|status|start_foreground]"
		}
		SMANAGER="2"
	else
		echo "Unkown service manager"	 
		function vpl_install_service {
			cp vpl-jail-system.initd $VPL_PROGRAMS_DIR/vpl-jail-system
			chmod +x $VPL_PROGRAMS_DIR/vpl-jail-system
			echo "You must install the service manually."
			echo "The script to start, stop, etc. the service is:"
			echo "/usr/sbin/vpl/vpl-jail-system"
		}
		function vpl_stop_service {
			echo "You must run:"
			echo "/usr/sbin/vpl/vpl-jail-system stop"
		}
		function vpl_start_service {
			echo "You must run:"
			echo "/usr/sbin/vpl/vpl-jail-system start"
		}
		function vpl_info_using_service {
			echo
			echo "-------------------------------------------------------"
			echo "Notice: you may use next command to control the service"
			echo "/usr/sbin/vpl/vpl-jail-system [start|stop|restart|start_foreground]"
		}
		SMANAGER="3"
	fi
}

function vpl_check_selinux {
	if [ "$(command -v setenforce)" != "" ] ; then
		echo "----------------------------------------------------"
		echo "Your system seems to be using SELinux."
		echo "You may need to disable or configure SELinux to install and run vpl-jail-system service"
		echo "To reactivate the vpl-jail-system service run:"
		echo "  systemctl daemon-reload"
		echo "  systemctl enable vpl-jail-system"
		echo "  systemctl start vpl-jail-system"
	fi
}

function vpl_install_package {
	if [ "$LISTPACKAGES" != "" ] ; then
		echo -n "  $1 -> "
		shift
		while [ "$#" != "0" ] ; do
			echo -n $1
			shift
			if [ "$#" != "0" ] ; then
				echo -n " or "
			fi
		done
		echo ""
		return
	fi
	local found=0
	local checked=""
	echo -n "Installing $1: "
	shift
	while [ "$#" != "0" ] ; do
		checked="$checked $1"
   		vpl_install_check $1
		if [ $? -eq 0 ] ; then
	   	   echo -n $1
	       vpl_install_base $1
	   	   if [ $? -eq 0 ] ; then
	   	   		found=1
	   	   		echo " [OK]"
	   	   else
	   	   		echo " [ERROR]"
	   	   fi
	       break
   	   fi
       shift
   done
   if [ $found -eq 0 ] ; then
   	   echo "[Package not found. Checked:$checked]"
   fi
}

function vpl_install_npm_check {
    vpl_install_check npm
	if [ $? -eq 0 ] ; then
		vpl_install_base npm
	fi
}

function vpl_install_npm {
	if [ "$LISTPACKAGES" != "" ] ; then
		echo -n "  $1 -> npm "
		shift
		while [ "$#" != "0" ] ; do
			echo -n $1
			shift
			if [ "$#" != "0" ] ; then
				echo -n " or "
			fi
		done
		echo ""
		return
	fi
    vpl_install_check npm
	if [ $? -eq 0 ] ; then
		vpl_install_base npm
	fi
	local found=1
	local checked=""
	echo -n "Installing $1 (using npm): "
	shift
	while [ "$#" != "0" ] ; do
	    checked="$checked $1"
   	    npm install -g $1 &> /dev/null
   	    if [ $? -eq 0 ] ; then
   	   	    echo " [OK]"
	        found=0
   	   	    break
   	    fi
        shift
   done
   if [ $found -eq 1 ] ; then
   	   echo "[Package npm not found. Checked$checked"
   fi
}


function vpl_installq {
   echo -n "Do you want to install $1 (y/n) "
   A="y"
   read A
   if [ "$A" == "y" ] ; then
        vpl_install_package $@
   fi
}

function vpl_install_letsencrypt {
	vpl_install_package "Let's Encrypt" certbot
	if [ "$(command -v certbot)" = "" ] ; then
		echo "Error: certbot not installed."
		echo "Please install cerbot manually"
		exit 0
	fi
	local DETECTEDFQDN=""
	local HNAME=""
	if [ "$(command -pv dnsdomainname)" != "" ] ; then
		DETECTEDFQDN=$(dnsdomainname -A)
	fi
	echo "Please, enter the domain name (FQDN) of this machine in order to install the configure Certbot."
	echo -n "($DETECTEDFQDN): "
	read HNAME
	if [ "$HNAME" == "" ] ; then
		HNAME=$DETECTEDFQDN
	fi
	certbot certonly --standalone --preferred-challenges http -d $HNAME
	systemctl enable --now certbot-renew.timer
	echo "pre_hook = systemctl stop vpl-jail-system" >> /etc/letsencrypt/renewal/$HNAME.conf
	echo "post_hook = systemctl start vpl-jail-system" >> /etc/letsencrypt/renewal/$HNAME.conf
	ln -s /etc/letsencrypt/live/$HNAME/fullchain.pem /etc/vpl/cert.pem 2> /dev/null 
	ln -s /etc/letsencrypt/live/$HNAME/privkey.pem /etc/vpl/key.pem 2> /dev/null
}

function vpl_install_jgrasp {
	local URLBASE="https://www.jgrasp.org/dl4g/jgrasp/"
	local VERSION="205_04"
	local FILENAME="jgrasp205_04.zip"
	local CDIR=""
	while true ; do
		echo -n "Version number of JGrasp to install e.g. 2.0.5_04 (0 to exit)"
		read VERSION
		if [ "$VERSION" == "0" ] ; then
			break
		fi 
		VERSION=$(echo $VERSION | sed 's/\.//g')
		FILENAME="jgrasp$VERSION.zip"
		wget -q $URLBASE$FILENAME
		if [ "$?" == "0" -a -f "$FILENAME" ] ; then
			unzip $FILENAME > /dev/null
			if [ -d "jgrasp" ] ; then
				rm -R /usr/local/jgrasp 2> /dev/null
				rm /usr/bin/jgrasp 2> /dev/null
				mv jgrasp /usr/local/jgrasp
				ln -s /usr/local/jgrasp/bin/jgrasp /usr/bin/jgrasp
				CDIR=$(pwd)
				cd /usr/local/jgrasp/src
				./configure > /dev/null
				./Make.sh
				if [ "$?" == "0" ] ; then
					cd $CDIR
					break
				else
					cd $CDIR
					echo "Error compiling code. Try again"
				fi
			else
				echo "Error uncompressing package, jgrasp dir not found. Try again"
			fi
		else
			echo "Version not found. Try gain."
		fi
	done
}

function vpl_install_kotlin {
	local URLBASE="https://github.com/JetBrains/kotlin/releases/download/"
	local VERSION="1.4.21"
	local FILENAME=""
	local CDIR=""
	while true ; do
		echo -n "Version number of Kotlin to install e.g. 1.4.21 (0 to exit)"
		read VERSION
		if [ "$VERSION" == "0" ] ; then
			break
		fi
		SUBDIR="v$VERSION/"
		FILENAME="kotlin-compiler-$VERSION.zip"
		wget -q $URLBASE$SUBDIR$FILENAME
		if [ "$?" == "0" -a -f "$FILENAME" ] ; then
			unzip $FILENAME > /dev/null
			if [ -d "kotlinc" ] ; then
				DESTINATION=/opt/kotlin
				rm -R $DESTINATION 2> /dev/null
				mv kotlinc $DESTINATION
				ln -s $DESTINATION/bin/kotlinc /usr/bin/kotlinc
				break
			else
				echo ""
				echo "Error uncompressing package, jgrasp dir not found. Try again"
				echo ""
			fi
		else
			echo "Version not found. Try gain."
		fi
	done
}

function vpl_generate_selfsigned_certificate {
	local A=""
	local HNAMEW=$(hostname --long| sed 's/^[^\.]*/\*/g')
	local HNAME=$(hostname --long)
	local INAME
	echo "Generating self-signed SSL certificate for $HNAME machine"
	#Get host name to generate the certificate
	echo -n "Do you want a certificate with wildcard for a set of servers ($HNAMEW)? (y/n)"
	read A
	if [ "$A" == "y" ] ; then
		INAME=$HNAMEW
	else
		INAME=$HNAME
	fi
	if [ "$INAME" = "" ] ; then
		INAME=localhost
	fi
	#Generate key
	openssl genrsa -passout pass:12345678 -des3 -out key.pem 2048
	#Generate certificate for this server
	echo -n "Do you want to customize the certificate info? (y/n)"
	read A
	if [ "$A" == "y" ] ; then
		openssl req -new -key key.pem -out certini.pem -passin pass:12345678
	else
		local SUBJ="/C=ES/ST=State/L=Location/O=VPL/OU=Execution server/CN=$INAME"
		openssl req -new -subj "$SUBJ" -key key.pem -out certini.pem -passin pass:12345678
	fi
	#Remove key password
	cp key.pem keyini.pem
	openssl rsa -in keyini.pem -out key.pem -passin pass:12345678
	#Generate self signed certificate for 5 years
	openssl x509 -in certini.pem -out cert.pem -req -signkey key.pem -days 1826 
}

function vpl_show_help() {
	echo ""
    echo "---------------------------------------------------"
    echo "VPL-Jail-System Installer"
    echo ""
    echo "This script is used to install the VPL-Jail-System."
    echo "Note that you can install manually all the software you want to use."
    echo "Usage: ./install-vpl.sh [OPTIONS]"
    echo ""
    echo "OPTIONS:"
    echo "  help           Show this help message and exit."
    echo "  update         Update the VPL-Jail-System daemon restarting the servise."
    echo "  start          Start the VPL-Jail-System service after installation."
    echo "  noninteractive Install without user interaction."
    echo "  minimum        Install the minimum required software packages."
    echo "  basic          Install basic additional packages."
    echo "  standard       Install standard additional packages."
    echo "  full           Install full additional packages."
	echo "  list           Show the packages to install by option"
    echo ""
    echo "EXAMPLES:"
    echo "  ./install-vpl.sh update"
	echo "         Update the VPL-Jail-System daemon."
    echo "  ./install-vpl.sh standard noninteractive start"
	echo "         Install standard packages and start the service."
    echo "  ./install-vpl.sh full"
	echo "         Install all the packages."
}

function vpl_install_update_daemon() {
	echo "Preparing daemon compilation"
	[ "$(command -v autoreconf)" != "" ] && autoreconf -f -i
	./configure >> "$LOGFILE"
	echo "Compiling daemon (vpl-jail-server)"
	make >> "$LOGFILE"
	if [ -d $VPL_CONFIG_DIR ] ; then
		echo "Updating installation => $VPL_CONFIG_DIR"
		if [ -n "$(ps | grep vpl-jail-server)" ] ; then
			vpl_stop_service >> "$LOGFILE"
			local NEED_RESTART=yes
		fi
	else
		echo "Installing => $VPL_CONFIG_DIR"
		mkdir -p $VPL_CONFIG_DIR
	fi
	mkdir -p $VPL_PROGRAMS_DIR
	#Copy daemon 
	cp src/vpl-jail-server $VPL_PROGRAMS_DIR
	[ -n "$NEED_RESTART" ] && vpl_start_service >> "$LOGFILE"
}

function vpl_install_update_extra_files() {
	local VPL_CONFIGFILE=$VPL_CONFIG_DIR/vpl-jail-system.conf
	if [ -f $VPL_CONFIGFILE ] ; then
		A=""
		if [ "$NONINTERACTIVE" == "" ] ; then
			echo "Replace current configuration file with a fresh one?"
			echo -n "(y/n)"
			read A
		fi
		if [ "$A" == "y" ] ; then
			cp vpl-jail-system.conf $VPL_CONFIGFILE
			echo "Configuration file replaced"
		else
			echo "Configuration file keeped"
		fi
	else
		cp vpl-jail-system.conf $VPL_CONFIGFILE
		echo "Default configuration file installed"
		if [ "$PMTYPE" == "1"  ] ; then
			echo "" >> $VPL_CONFIGFILE
			echo "ENVPATH=/usr/bin:/bin" >> $VPL_CONFIGFILE
			echo "Configuration file changed for CentOS. Added ENVPATH"
		fi
	fi
	chmod 600 $VPL_CONFIGFILE

	# Copy launch scripts
	cp vpl_*.sh $VPL_PROGRAMS_DIR
	chmod +x $VPL_PROGRAMS_DIR/*.sh
	echo "Installing launch scripts"

	# Create default control dir
	mkdir -p /var/vpl-jail-system
	chmod 0600 /var/vpl-jail-system
}

function vpl_install_minimum() {
	echo ""
	echo "Minimum required packages"
	if [ "$PMTYPE" == "1" ] ; then
		vpl_install_package "LSB core" redhat-lsb-core
		vpl_install_package "make" make
		vpl_install_package "C compiler" gcc
		vpl_install_package "C++ compiler" gcc-c++
		vpl_install_package "SSL library" openssl		
		vpl_install_package "SSL library" openssl-devel	
		vpl_install_package "Firewall" iptables
		vpl_install_package "Window manager" openbox metacity
		vpl_install_package "xterm" xterm
		vpl_install_package "xset" xset
		vpl_install_package "VNC server" tigervnc-server
	elif [ "$PMTYPE" == "2" ] ; then
		if [ "$(command -v add-apt-repository)" != "" ] ; then
			add-apt-repository universe &> /dev/null
		fi
		vpl_install_package "apt-utils" apt-utils
		vpl_install_package "make" make
		vpl_install_package "automake tools" automake
		vpl_install_package "LSB" lsb lsb-core lsb-compat
		vpl_install_package "C++ compiler" g++
		vpl_install_package "SSL library" openssl
		vpl_install_package "SSL library" libssl-dev
		vpl_install_package "Firewall" iptables
		vpl_install_package "X system" xorg
		vpl_install_package "dbus-x11" dbus-x11
		vpl_install_package "VNC server" tightvncserver
		vpl_install_package "Fonts" xfonts-75dpi
		vpl_install_package "Fonts" xfonts-100dpi
		vpl_install_package "Window manager" openbox metacity
		vpl_install_package "Configuration DB system" gconf2
		vpl_install_package "xterm" xterm
		if [ "$(command -v gconftool-2)" != "" ] ; then
			gconftool-2 --direct --config-source xml:readwrite:/etc/gconf/gconf.xml.defaults -t string --set /apps/metacity/general/theme Redmond
		fi
		vpl_install_package "wget" wget
		vpl_install_package "curl" curl
		vpl_install_package "net-tools" net-tools
		vpl_install_package "bc" bc
	elif [ "$PMTYPE" == "3" ] ; then
		vpl_install_package "make" make
		vpl_install_package "automake tools" automake
		vpl_install_package "LSB" lsb-release-minimal
		vpl_install_package "C++ compiler" g++
		vpl_install_package "SSL library" openssl
		vpl_install_package "SSL library" openssl-dev
		vpl_install_package "Firewall" iptables
		vpl_install_package "X system" xorg-server
		vpl_install_package "dbus-x11" dbus-x11
		vpl_install_package "VNC server" tigervnc
		vpl_install_package "Python XDG" py3-xdg
		vpl_install_package "Window manager" openbox
		vpl_install_package "xterm" xterm
		vpl_install_package "wget" wget
		vpl_install_package "curl" curl
		vpl_install_package "net-tools" net-tools
		vpl_install_package "bc" bc
	fi
	echo
}

function vpl_install_basic() {
	echo ""
	echo "Basic aditional packages"
	if [ "$PMTYPE" = "1" ] ; then
		vpl_install_package "General purpose debugger (GNU)" gdb
		vpl_install_package "DDD graphical front end debugger (GNU)" ddd
		vpl_install_package "Java (OpenJDK)" java-1.8.0-openjdk-devel java-1.7.0-openjdk-devel
		vpl_install_package "Junit framework" junit
		vpl_install_package "PHP interpreter" php-cli
		vpl_install_package "Python3" python3
		vpl_install_package "Python3 Tkinter" python3-tkinter
		vpl_install_package "Python3 NumPy" python3-numpy
		vpl_install_package "Python3 pandas" python3-pandas
		vpl_install_package "Python3 Matplotlib" python3-matplotlib
		vpl_install_package "Python3 pudb" python3-pudb
		vpl_install_package "Python3 pycodestyle" python3-pycodestyle
		vpl_install_package "Python3 NetworkX" python3-networkx
		vpl_install_package "Python3 mypy" python3-mypy
		vpl_install_package "Python3 flake8" python3-flake8
		vpl_install_package "Python3 pydocstyle" python3-pydocstyle
		vpl_install_package "Pythom Thonny" thonny

		vpl_install_package "SQL interpreter" sqlite
		echo "IMPORTANT: Please, set properly the ENVPATH in the config file /etc/vpl/vpl-jail-system.conf" 
		echo "           e.g. \"ENVPATH=/usr/bin:/bin:/usr/sbin\" and restart the service"
	elif [ "$PMTYPE" = "2" ] ; then
		vpl_install_package "C compiler (GNU)" gcc
		vpl_install_package "General purpose debugger (GNU)" gdb
		vpl_install_package "DDD graphical front end debugger (GNU)" ddd
		vpl_install_package "Java runtime" default-jre openjdk-11-jre openjdk-8-jre openjdk-7-jre
		vpl_install_package "Java jdk" default-jdk openjdk-11-jdk openjdk-8-jdk openjdk-7-jdk
		if [ "$(command -v update-alternatives)" != "" -a "$LISTPACKAGES" == "" ] ; then
			update-alternatives --auto java
			update-alternatives --auto javac
		fi
		vpl_install_package "JavaFX" openjfx
		vpl_install_package "Java Checkstyle" checkstyle
		vpl_install_package "Junit framework" junit4 junit
		vpl_install_package "PHP interpreter" php-cli
		vpl_install_package "PHP readline" php-readline
		vpl_install_package "Sqlite for PHP" php-sqlite3
		vpl_install_package "Python3" python3
		vpl_install_package "Python3 Tk" python3-tk
		vpl_install_package "Python3 NumPy" python3-numpy
		vpl_install_package "Python3 pandas" python3-pandas
		vpl_install_package "Python3 Matplotlib" python3-matplotlib
		vpl_install_package "Python3 pudb" python3-pudb
		vpl_install_package "Python3 pycodestyle" python3-pycodestyle
		vpl_install_package "Python3 NetworkX" python3-networkx
		vpl_install_package "Python mypy" mypy
		vpl_install_package "Python pycodestyle" pycodestyle
		vpl_install_package "Python pydocstyle" pydocstyle
		vpl_install_package "Pythom Thonny" thonny
		vpl_install_package "SQL interpreter" sqlite3
	elif [ "$PMTYPE" = "3" ] ; then
		vpl_install_package "C compiler (GNU)" gcc
		vpl_install_package "General purpose debugger (GNU)" gdb
		vpl_install_package "Java" openjdk21 openjdk20 openjdk19 openjdk17 openjdk11 openjdk8
		vpl_install_package "Junit framework" junit4 junit
		vpl_install_package "PHP interpreter" php83 php82 php81 php8
		vpl_install_package "Sqlite for PHP" php83-sqlite3 php82-sqlite3 php81-sqlite3 php8-sqlite3
		vpl_install_package "Python3" python3
		vpl_install_package "Python3 Tk" python3-tkinter
		vpl_install_package "Python3 NumPy" py3-numpy
		vpl_install_package "Python3 pandas" py3-pandas
		vpl_install_package "Python3 Matplotlib" py3-matplotlib
		vpl_install_package "Python3 pycodestyle" py3-pycodestyle
		vpl_install_package "Python3 NetworkX" py3-networkx
		vpl_install_package "Python3 mypy" py3-mypy
		vpl_install_package "Python3 pycodestyle" py3-pycodestyle
		vpl_install_package "Python3 pydocstyle" py3-pydocstyle
		vpl_install_package "Pythom Thonny" thonny
		vpl_install_package "SQL interpreter" sqlite
	fi
	echo
}

function vpl_install_standard() {
	echo ""
	echo "Standard aditional packages"
	if [ "$PMTYPE" = "1" ] ; then
		vpl_install_package "Ada compiler (GNU)" gcc-gnat
		vpl_install_package "Assembler" nasm
		vpl_install_package "C# development framework (mono)" mono-complete
		vpl_install_package "Fortran compiler (GNU)" gcc-gfortran
		vpl_install_package "Haskell" haskell-platform
		vpl_install_package "JavaScript (Nodejs)" nodejs
		vpl_install_npm "TypeScript" typescript
		vpl_install_npm "Sass" sass
		vpl_install_package "Octave (GNU)" octave
		vpl_install_package "Pascal compiler" fpc
		vpl_install_package "Perl interpreter" perl
		vpl_install_package "Prolog" pl
		vpl_install_package "Ruby interpreter" ruby
		vpl_install_package "Rust compiler" rust
		vpl_install_package "Scala programming language" scala
		vpl_install_package "Scheme interpreter" racket
		vpl_install_package "TCL interpreter" tcl
		vpl_install_package "Valgrind tool" valgrind
	elif [ "$PMTYPE" = "2" ] ; then
		vpl_install_package "Ada compiler (GNU)" gnat
		vpl_install_package "Assembler" nasm
		vpl_install_package "C# development framework (mono)" mono-complete
		vpl_install_package "Fortran compiler (GNU)" gfortran
		vpl_install_package "Haskell" hgc hugs
		vpl_install_package "JavaScript (Nodejs)" nodejs
		vpl_install_package "JavaScript (Nodejs-legacy)" nodejs-legacy
		vpl_install_npm "TypeScript" typescript
		vpl_install_npm "Sass" sass
		vpl_install_package "Octave (GNU)" octave
		vpl_install_package "Pascal compiler" fp-compiler
		vpl_install_package "Perl interpreter" perl
		vpl_install_package "Prolog" swi-prolog
		vpl_install_package "Ruby interpreter" ruby
		vpl_install_package "Rust compiler" rustc
		vpl_install_package "Scala programming language" scala
		vpl_install_package "Scheme interpreter" plt-scheme racket
		vpl_install_package "TCL interpreter" tcl
		vpl_install_package "Valgrind tool" valgrind
	fi
	echo
}

function vpl_install_full() {
	echo ""
	if [ "$PMTYPE" == "1" ] ; then
		echo "Full aditional packages"
		vpl_install_package "Clisp" clisp
		vpl_install_package "Clojure" clojure clojure1.6 clojure1.4
		vpl_install_package "Cobol" gnucobol
		vpl_install_package "CoffeeScript" coffee-script
		vpl_install_package "D compiler (GNU)" gcc-gdc
		vpl_install_package "Erlang" erlang
		vpl_install_package "Go programming language compiler" golang
		vpl_install_package "Haxe programming language" haxe
		vpl_install_package "JQuery JavaScript Lib" js-jquery
		vpl_install_package "JQuery-UI JavaScript Lib" js-jquery-ui
		vpl_install_package "Julia" julia
		vpl_install_package "Lua compiler" lua lua5.1
		vpl_install_package "R statistical computation and graphics system (GNU)" R
		vpl_install_package "MIPS R2000/R3000 emulator" spim
		vpl_install_package "Verilog compiler" iverilog
		vpl_install_package "VHDL compiler" ghdl freehdl
		vpl_install_package "Web browser" firefox
	elif [ "$PMTYPE" = "2" ] ; then
		echo "Full aditional packages"
		vpl_install_package "Clisp" clisp
		vpl_install_package "Clojure" clojure clojure1.6 clojure1.4
		vpl_install_package "Cobol" open-cobol
		vpl_install_package "CoffeeScript" coffeescript
		vpl_install_package "D compiler (GNU)" gdc
		vpl_install_package "Erlang" erlang
		vpl_install_package "Go programming language compiler" golang
		vpl_install_package "Haxe programming language" haxe
		vpl_install_package "JQuery JavaScript Lib" libjs-jquery
		vpl_install_package "JQuery-UI JavaScript Lib" libjs-jquery-ui
		vpl_install_package "Julia" julia
		vpl_install_package "Lua compiler" lua lua5.4 lua5.3 lua5.2  lua5.1
		vpl_install_package "R statistical computation and graphics system (GNU)" r-base
		vpl_install_package "MIPS R2000/R3000 emulator" spim
		vpl_install_package "MiniZinc constraint modeling language" minizinc
		vpl_install_package "XQuery interpreter" galax
		vpl_install_package "Verilog compiler" iverilog
		vpl_install_package "VHDL compiler" ghdl freehdl
		vpl_install_package "libtool required for VHDL" libtool-bin
		vpl_install_package "Groovy programming language" groovy
		vpl_install_package "Web browser" firefox firefox-esr
	fi
	if [ "$LISTPACKAGES" != "" ] ; then
		echo "  JGrasp (requires user intervention) "
		echo "  Kotlin (requires user intervention) "
		echo
		return
	fi

	if [ "$NONINTERACTIVE" == "" ] ; then
		echo "Do you want to try to install Kotlin?"
		echo -n "(y/n)"
		read A3
		if [ "$A3" != "n" ] ; then
			vpl_install_kotlin
		fi
		echo "Do you want to try to install JGrasp?"
		echo -n "(y/n)"
		read A4
		if [ "$A4" != "n" ] ; then
			vpl_install_jgrasp
		fi
	fi
}

function vpl_check_SSL_certificate() {
	if [ ! -f $VPL_CONFIG_DIR/key.pem ] ; then
		if [ "$NONINTERACTIVE" == "" ] ; then
			echo "VPL execution server needs SSL certificates to accept https:"
			echo "and wss: requests."
			echo "If you have certificates then copy the key and the certificate file"
			echo "in pem format to $VPL_CONFIG_DIR/key.pem and $VPL_CONFIG_DIR/cert.pem"
			echo "If you don't have certificate the intaller can install and configure"
			echo "Let's Encryptn cerbot in standalone mode for you."
			echo "If yuo want to use cerbot in webroot mode you must install and configure it manually."
			echo "Notice that this machine must be accesible from internet and has port 80 available."
			echo -n "Install Let's Encrypt in standalone mode to get and renew free certificates?"
			echo -n "(y/n)"
			read A	
			if [ "$A" != "n" ] ; then
				vpl_install_letsencrypt	
			else
				echo "If you want the intaller can generate a selfsigned certificate for you."
				echo -n "Generate the certificate?"
				read A
				if [ "$A" != "n" ] ; then
					vpl_generate_selfsigned_certificate
					cp key.pem $VPL_CONFIG_DIR
					cp cert.pem $VPL_CONFIG_DIR
					chmod 600 $VPL_CONFIG_DIR/*.pem
					rm key.pem keyini.pem certini.pem cert.pem
				fi
			fi
		fi
	fi
}

function vpl_commandline_arg() {
	case "$1" in
		help)
			vpl_show_help
			exit 0
			;;
		update)
			vpl_install_update_daemon
			vpl_install_update_extra_files
			[ -z "$NONINTERACTIVE" ] && vpl_info_using_service
			exit 0
			;;
		start)
			export START=yes
			;;
 		noninteractive)
			export NONINTERACTIVE=yes
			export DEBIAN_FRONTEND=noninteractive
			;;
		list)
			export LISTPACKAGES=yes
			vpl_install_minimum
			vpl_install_basic
            vpl_install_standard
            vpl_install_full
			exit
			;;
		minimum)		
			export MINIMUM=yes
			;;
		basic)
			export MINIMUM=yes
			export BASIC=yes
			;;
		standard)
			export MINIMUM=yes
			export BASIC=yes
			export STANDARD=yes
			;;
		full)
			export MINIMUM=yes
			export BASIC=yes
			export STANDARD=yes
			export FULL=yes
			;;
		*)
			echo ""
			echo " => Error: unknow parameter '$1'"
			vpl_show_help
			exit 1
			;;
	esac
}

vpl_detect_package_manager
vpl_detect_service_manager

echo "Installation log file => $LOGFILE"
while [ $# -gt 0 ] ; do
	vpl_commandline_arg "$1"
	shift
done
if [ "$MINIMUM" == "" ] ; then
	vpl_show_help
	exit 1
fi
vpl_install_minimum
vpl_install_update_daemon
vpl_install_update_extra_files
vpl_install_service
vpl_check_SSL_certificate

[ "$BASIC" != "" ] && vpl_install_basic
[ "$STANDARD" != "" ] && vpl_install_standard
[ "$FULL" != "" ] && vpl_install_full

echo "-----------------------------------------------------------------"
echo "If you are planning to use apache2, nginx or other service,"
echo "notice that you must use different ports that in vpl-jail-system."

if [ "$START" == "yes" ] ; then
	vpl_check_selinux
	echo "Starting the service (vpl-jail-system)"
	vpl_start_service
fi
vpl_info_using_service
