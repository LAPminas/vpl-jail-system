name: VPL jail server Build and Release (VPL Moodle Plugin)

on: [workflow_dispatch]

jobs:
  
    build:
        runs-on: ubuntu-22.04
        strategy:
          fail-fast: true
    
        steps:
          - name: Check out repository code
            uses: actions/checkout@v4
            with:
              path: ~
              fetch-depth: 0
    
          - name: Install Dependencies
            run: sudo apt-get update && sudo apt-get install -y autoconf automake libtool git grep
        
          - name: Prepare the Build
            run: |
              autoreconf -i
              aclocal
              autoheader
              autoconf
              automake
              ./configure
    
          - name: Build and Check
            run: make distcheck

          - name: Extract branch name
            id: branch
            run: |
                package_name=$(ls *.gz | head -n1)
                package_version=${package_name#vpl-jail-system-}
                package_version=${package_version%.tar.gz}
                tag_name="V${package_version}dev"
                ([ "${{ github.ref }}" = "refs/heads/master" ] && tag_name=latest) || is_master=
                echo "package_version=$package_version" >> "$GITHUB_OUTPUT"
                echo "package_name=$package_name"  >> "$GITHUB_OUTPUT"
                echo "tag_name=$tag_name"  >> "$GITHUB_OUTPUT"
                echo "git ref=${{ github.ref }}"
                echo "package_version=$package_version"
                echo "package_name=$package_name"
                echo "tag_name=$tag_name"
          - name: Upload package
            uses: actions/upload-artifact@v4
            with:
              overwrite: true
              name: build_package.gz
              path: ${{ steps.branch.outputs.package_name }}
              if-no-files-found: error

          - name: Get previous release ID by Tag
            id: previous_release
            uses: actions/github-script@v6
            with:
              script: |
                const tag = '${{ steps.branch.outputs.tag_name }}';
                const releases = await github.rest.repos.listReleases({
                  owner: context.repo.owner,
                  repo: context.repo.repo
                });
                const release = releases.data.find(release => release.tag_name === tag);
                if (release) {
                  core.setOutput('id', release.id);
                  console.log('Release ID:' + release.id);
                } else {
                  console.log('Release not found for tag: ' + tag);
                }

          - name: Delete previous tag
            continue-on-error: true
            run: |
              tag_name=${{ steps.branch.outputs.tag_name }}
              (git tag -l | grep "^${tag_name}\$") || result=$?
              [ $result -ne 0 ] && exit 0
              git tag -d $tag_name
              git push origin --delete $tag_name
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        outputs:
          package_version: ${{ steps.branch.outputs.package_version }}
          package_name: ${{ steps.branch.outputs.package_name }}
          tag_name: ${{ steps.branch.outputs.tag_name }}
          previous_release_id: ${{ steps.previous_release.outputs.id }}

    release:
        needs: build
        runs-on: ubuntu-22.04
        strategy:
          fail-fast: false
        env:
          package_version: ${{ needs.build.outputs.package_version }}
          package_name: ${{ needs.build.outputs.package_name }}
          tag_name: ${{ needs.build.outputs.tag_name }}
          previous_release_id: ${{ needs.build.outputs.previous_release_id }}

        steps:
            - name: Download package
              uses: actions/download-artifact@v4
              with:
                name: build_package.gz
                path: ./assets

            - name: Remove previous realease
              if: env.previous_release_id
              uses: actions/github-script@v7
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                script: |
                  const release_id = ${{ env.previous_release_id }};
                  await github.rest.repos.deleteRelease({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release_id,
                  });

            - name: Create Development Release
              if: ${{env.tag_name}} != 'latest'
              uses: actions/create-release@v1
              id: create_dev_release
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                tag_name: ${{ env.tag_name }}
                release_name: "VPL-JAIL-SYSTEM ${{ env.tag_name }}"
                draft: false
                prerelease: true
                body: |
                  ## This is an automated build of VPL-JAIL-SYSTEM ${{ env.tag_name }} using ${{ github.ref }}

                  This release was generated through our Continuous Integration (CI) process.
                  Please be aware that this build is not an official release.
                  **It is intended primarily for testing and development purposes**.
                  Users should employ this build with the understanding that it has
                  not undergone the same level of testing as our official releases
                  and may contain bugs or unfinished features.

                  **Use this build with caution** and consider the potential risks before
                  deployment in a production environment.

            - name: Upload Development Release Asset
              if: env.tag_name != 'latest'
              uses: actions/upload-release-asset@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{ steps.create_dev_release.outputs.upload_url }}
                asset_path: "./assets/${{ env.package_name }}"
                asset_name: ${{ env.package_name }}
                asset_content_type: application/gzip

            - name: Create Latest Release
              if: env.tag_name == 'latest'
              uses: actions/create-release@v1
              id: create_latest_release
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                tag_name: ${{ env.tag_name }}
                release_name: "VPL-JAIL-SYSTEM latest release build"
                draft: false
                prerelease: true
                body: |
                  ## This is an automated build of VPL-JAIL-SYSTEM V${{ env.package_version }}

                  This release was generated for **latest download** porpouse from the master branch.

            - name: Prepare Latest Asset
              if: env.tag_name == 'latest'
              run: |
                mv "./assets/${{ env.package_name }}" "./assets/vpl-jail-system-latest.tar.gz"

            - name: Upload Latest Release Asset
              if: ${{env.tag_name}} = 'latest'
              uses: actions/upload-release-asset@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{ steps.create_latest_release.outputs.upload_url }}
                asset_path: "./assets/vpl-jail-system-latest.tar.gz"
                asset_name: vpl-jail-system-latest.tar.gz
                asset_content_type: application/gzip
